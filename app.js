// app.js

async function registerFingerprint() {
    try {
      const publicKeyCredentialCreationOptions = {
        // This part should be created securely on your backend
        challenge: new Uint8Array([/* some random byte array generated by backend */]),
        rp: {
          name: "Fingerprint Attendance",
        },
        user: {
          id: new TextEncoder().encode("user-id"), // Use unique ID for each learner
          name: "learner-name",
          displayName: "Learner Name",
        },
        pubKeyCredParams: [
          {
            type: "public-key",
            alg: -7, // ES256 Algorithm
          },
        ],
        authenticatorSelection: {
          authenticatorAttachment: "platform", // This allows using the device's built-in fingerprint sensor
        },
        timeout: 60000,
        attestation: "direct",
      };
  
      const credential = await navigator.credentials.create({
        publicKey: publicKeyCredentialCreationOptions,
      });
  
      // Send the credential to the server for storage
      console.log("Fingerprint Registered:", credential);
    } catch (error) {
      console.error("Error during fingerprint registration:", error);
    }
  }
  
  async function authenticateFingerprint() {
    try {
      const publicKeyCredentialRequestOptions = {
        challenge: new Uint8Array([/* some random byte array generated by backend */]),
        allowCredentials: [
          {
            id: new TextEncoder().encode("stored-credential-id"), // Get stored credential ID
            type: "public-key",
          },
        ],
        timeout: 60000,
      };
  
      const credential = await navigator.credentials.get({
        publicKey: publicKeyCredentialRequestOptions,
      });
  
      // Send the credential to your server for verification
      console.log("Authenticated Fingerprint:", credential);
    } catch (error) {
      console.error("Error during fingerprint authentication:", error);
    }
  }
  